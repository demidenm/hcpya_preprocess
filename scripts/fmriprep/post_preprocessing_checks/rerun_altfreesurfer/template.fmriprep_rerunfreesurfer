#!/bin/bash

# --- Input Variables: Define paths, IDs, and settings ---
inp_loc=S3ORNGDR
fmriprep_ver=PREPROC_VR
subj_id=SUBJECTID
ses_id=SESID
data_dir=SCRATCHDIR
inp_ngdr=NGDR
inp_bucket=INBUCKET
data_bucket=OUTBUCKET
run_dir=RUNDIR
log_num=LOGNUM
singularity=$(which singularity || { echo "Singularity not found. Exiting."; exit 1; })
singularity_img=SIGINF
freesurfer_license=FSLICENSE
fplog_dir=${run_dir}/fmriprep_${ses_id}_logs
compdate=$(date)
completed_file=${run_dir}/${ses_id}_completed.tsv
failed_file=${run_dir}/${ses_id}_failed.tsv

# Check if completed/failed_file exists, if not create it
if [ ! -f "$completed_file" ]; then
    touch "$completed_file"
fi

if [ ! -f "$failed_file" ]; then
    touch "$failed_file"
fi

# Data Syncing: S3 or NGDR
bids_dir="${data_dir}/bids_dir/sub-${subj_id}_ses-${ses_id}/sub-${subj_id}/ses-${ses_id}"
if [ ! -d "$bids_dir" ]; then
	mkdir -p "$bids_dir"
	log_info "Created BIDS directory $bids_dir"

	if [ "$inp_loc" == "s3bucket" ]; then
		s3cmd sync --recursive "${inp_bucket}/sub-${subj_id}" "$bids_dir"
		check_command_status $? "Failed to sync from S3 bucket."
	elif [ "$inp_loc" == "ngdr" ]; then
		cp -r "${inp_ngdr}/sub-${subj_id}/ses-${ses_id}" "$bids_dir"
		check_command_status $? "Failed to copy from NGDR."
	else
		echo "Invalid input location: $inp_loc. Exiting."
		exit 1
	fi
fi

# Clean up Files 
fmap_path="${bids_dir}/fmap"
rm -f ${fmap_path}/*acq-dwi_dir*
rm -f ${fmap_path}/*acq-func_dir-both_*
rm -rf "${bids_dir}/dwi/"
rm -f "${bids_dir}/*.html"


# 1: This is NOT to delete fmaps but cases when number of runs *AP_run-01_epi.json* >1
#    remove instance of *AP_epi.*(should not occur as more than 1 run)
count=$(find ${fmap_path} -type f -name "sub-${subj_id}_ses-${ses_id}_acq-func_dir-AP_*epi.json" | wc -l)
if [ $count -gt 1 ]; then
	rm ${fmap_path}/sub-${subj_id}_ses-${ses_id}_acq-func_dir-AP_epi.*
	rm ${fmap_path}/sub-${subj_id}_ses-${ses_id}_acq-func_dir-PA_epi.*
fi

# 2: FMRIPREP expects a single run = IntendedFor AP/PA mapping. Errors IntendedFor for AP/PA is complex 
#    Here, selecting first instance of multiple, rm others to avoid complex.

for file in `ls ${fmap_path}/*.json` ; do  
	values=$(jq 'if has("IntendedFor") then .IntendedFor | length else 0 end' "$file")
	filename=$(basename ${file} .json ) 
	if [ "$values" -gt 0 ]; then 
		echo -e "STOPPING AT: ${file} \n\t IntendedFor Length: ${values}" 
		break
	fi
done

keep_pattern=${filename/AP/*} # adjust to replace AP with wildcard, so AP/PA are kept
find ${fmap_path} -type f ! -name "${keep_pattern}.*" -exec rm {} \;

# Copy dataset_description.json to avoid BIDS validation error
cp ${run_dir}/dataset_description.json ${data_dir}/bids_dir/sub-${subj_id}_ses-${ses_id}/
mkdir -p ${data_dir}/processed/${fmriprep_ver}/sub-${subj_id}_ses-${ses_id}
mkdir -p ${data_dir}/work_dir/${fmriprep_ver}/sub-${subj_id}_ses-${ses_id}

# --- Run Freesurfer --- 
module load freesurfer/7.4.1
echo "Running Freesurfer on $subj_id "
export FS_LICENSE=${freesurfer_license}

mkdir -p ${data_dir}/processed/${fmriprep_ver}/sub-${subj_id}_ses-${ses_id}/sourcedata/freesurfer
cp -R /common/software/install/manual/freesurfer/7.4.1/subjects/fsaverage ${data_dir}/processed/${fmriprep_ver}/sub-${subj_id}_ses-${ses_id}/sourcedata/freesurfer/
recon-all \
	-i ${data_dir}/bids_dir/sub-${subj_id}_ses-${ses_id}/sub-${subj_id}/ses-${ses_id}/anat/sub-${subj_id}_ses-${ses_id}_*_T1w.nii.gz \
	-T2 ${data_dir}/bids_dir/sub-${subj_id}_ses-${ses_id}/sub-${subj_id}/ses-${ses_id}/anat/sub-${subj_id}_ses-${ses_id}_*_T2w.nii.gz \
	-s sub-$subj_id \
	-wsless \
	-sd ${data_dir}/processed/${fmriprep_ver}/sub-${subj_id}_ses-${ses_id}/sourcedata/freesurfer \
	-all

# --- Run FMRIPrep --
singularity run --cleanenv \
	-B ${data_dir}/bids_dir/sub-${subj_id}_ses-${ses_id}:/bids_dir \
	-B ${data_dir}/processed/${fmriprep_ver}/sub-${subj_id}_ses-${ses_id}:/output_dir \
	-B ${data_dir}/work_dir/${fmriprep_ver}/sub-${subj_id}_ses-${ses_id}:/wd \
	${sif_img} \
	/bids_dir /output_dir participant \
	--participant-label ${subj_id} \
	--fs-license-file ${FS_L} \
	--fs-subjects-dir /output_dir/sourcedata/freesurfer \
	--bids-filter-file ${run_dir}/../task_list.json \
	--ignore slicetiming \
	--fd-spike-threshold .5 \
	--output-space MNI152NLin2009cAsym:res-2 \
	--project-goodvoxels \
	--cifti-output 91k \
	-vv \
	-w /wd

for log in ${log_num} ; do 
	comp=$(cat ${fplog_dir}/*_${log}.out | grep "fMRIPrep finished successfully" | sed -e 's/^[[:space:]]*//' -e 's/[[:punct:]]//g' ) 
	
	fMRIprep_error_msg=$(cat ${fplog_dir}/*_${log}.err | grep 'Error' | tr -d '\n\t')
	
	if [ -z "$fMRIprep_error_msg" ]; then
    		fMRIprep_error_msg=$(cat ${fplog_dir}/*_${log}.out | grep 'Error' | tr -d '\n\t')
	fi
	
	if [ "${comp}" == "fMRIPrep finished successfully" ]; then
		echo -e "${subj_id}\t${ses_id}\t${task}\tFSrr*_${log}.out\t${compdate}\t${fMRIprep_error_msg}" >> ${completed_file}
	else 
		echo -e "${subj_id}\t${ses_id}\t${task}\t*FSrr_${log}.err\t${compdate}\t${fMRIprep_error_msg}" >> ${failed_file}
	fi
done

#push processed outputs to bucket
s3cmd sync -F --recursive -v ${data_dir}/processed/${fmriprep_ver}/sub-${subj_id}_ses-${ses_id}/sub-${subj_id}/ ${data_bucket}/derivatives/${fmriprep_ver}/ses-${ses_id}/sub-${subj_id}/
s3cmd sync -F --recursive -v ${data_dir}/processed/${fmriprep_ver}/sub-${subj_id}_ses-${ses_id}/sub-${subj_id}.html ${data_bucket}/derivatives/${fmriprep_ver}/ses-${ses_id}/sub-${subj_id}.html
s3cmd sync -F --recursive -v ${data_dir}/processed/${fmriprep_ver}/sub-${subj_id}_ses-${ses_id}/sourcedata/freesurfer/sub-${subj_id}/ ${data_bucket}/derivatives/${fmriprep_ver}/ses-${ses_id}/sourcedata/freesurfer/sub-${subj_id}/

# run filemapper
echo "sync'd ${subj_id} to $data_bucket ${ses_id}"
echo
